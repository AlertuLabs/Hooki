This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-02T16:31:58.416Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
Enums/
  ActionType.cs
  InputType.cs
Models/
  Actions/
    ActionBase.cs
    ActionCardAction.cs
    HttpPostAction.cs
    InvokeAddInCommandAction.cs
    OpenUriAction.cs
  BuildingBlocks/
    Action.cs
    Fact.cs
    Header.cs
    Image.cs
    Section.cs
    Target.cs
  Inputs/
    Choice.cs
    DateInput.cs
    InputBase.cs
    MultiChoiceInput.cs
    TextInput.cs
  MessageCard.cs

================================================================
Repository Files
================================================================

================
File: Enums/ActionType.cs
================
using System.Runtime.Serialization;
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Enums;

//ToDo: Refactor this in .NET 9 with new attribute: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonStringEnumMemberNameAttribute.cs
[JsonConverter(typeof(JsonStringEnumMemberConverter))]
public enum ActionType
{
    [EnumMember(Value = "OpenUri")]
    OpenUri,

    [EnumMember(Value = "HttpPOST")]
    HttpPost,

    [EnumMember(Value = "ActionCard")]
    ActionCard,

    [EnumMember(Value = "InvokeAddInCommand")]
    InvokeAddInCommand
}

================
File: Enums/InputType.cs
================
using System.Runtime.Serialization;
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Enums;

//ToDo: Refactor this in .NET 9 with new attribute: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/JsonStringEnumMemberNameAttribute.cs
[JsonConverter(typeof(JsonStringEnumMemberConverter))]
public enum InputType
{
    [EnumMember(Value = "TextInput")]
    TextInput,
    
    [EnumMember(Value = "DateInput")]
    DateInput,
    
    [EnumMember(Value = "MultichoiceInput")]
    MultiChoiceInput
}

================
File: Models/Actions/ActionBase.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Actions;

[JsonDerivedType(typeof(OpenUriAction), typeDiscriminator: nameof(ActionType.OpenUri))]
[JsonDerivedType(typeof(HttpPostAction), typeDiscriminator: nameof(ActionType.HttpPost))]
[JsonDerivedType(typeof(ActionCardAction), typeDiscriminator: nameof(ActionType.ActionCard))]
[JsonDerivedType(typeof(InvokeAddInCommandAction), typeDiscriminator: nameof(ActionType.InvokeAddInCommand))]
public abstract class ActionBase
{
    [JsonPropertyName("@type")] public abstract ActionType Type { get; }

    [JsonPropertyName("name")] public string Name { get; set; } = default!;
}

================
File: Models/Actions/ActionCardAction.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;
using Hooki.MicrosoftTeams.Models.Inputs;

namespace Hooki.MicrosoftTeams.Models.Actions;

public class ActionCardAction : ActionBase
{
    public override ActionType Type => ActionType.ActionCard;

    [JsonPropertyName("inputs")] public List<InputBase> Inputs { get; set; } = [];

    [JsonPropertyName("actions")] public List<ActionBase> Actions { get; set; } = [];
}

================
File: Models/Actions/HttpPostAction.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;
using Hooki.MicrosoftTeams.Models.BuildingBlocks;

namespace Hooki.MicrosoftTeams.Models.Actions;

public class HttpPostAction : ActionBase
{
    public override ActionType Type => ActionType.HttpPost;

    [JsonPropertyName("target")] public string Target { get; set; } = default!;

    [JsonPropertyName("headers")] public List<Header> Headers { get; set; } = [];

    [JsonPropertyName("body")] public string? Body { get; set; }

    [JsonPropertyName("bodyContentType")] public string? BodyContentType { get; set; }
}

================
File: Models/Actions/InvokeAddInCommandAction.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Actions;

public class InvokeAddInCommandAction : ActionBase
{
    public override ActionType Type => ActionType.InvokeAddInCommand;

    [JsonPropertyName("addInId")] public string AddInId { get; set; } = default!;

    [JsonPropertyName("desktopCommandId")] public string DesktopCommandId { get; set; } = default!;

    [JsonPropertyName("initializationContext")] public object? InitializationContext { get; set; }
}

================
File: Models/Actions/OpenUriAction.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;
using Hooki.MicrosoftTeams.Models.BuildingBlocks;

namespace Hooki.MicrosoftTeams.Models.Actions;

public class OpenUriAction : ActionBase
{
    public override ActionType Type => ActionType.OpenUri;

    [JsonPropertyName("targets")] public List<Target> Targets { get; set; } = [];
}

================
File: Models/BuildingBlocks/Action.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Models.Inputs;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Action
{
    [JsonPropertyName("@type")] public string Type { get; set; } = default!;

    [JsonPropertyName("name")] public string Name { get; set; } = default!;

    [JsonPropertyName("targets")] public List<Target> Targets { get; set; } = [];

    [JsonPropertyName("target")] public string Target { get; set; } = default!;

    [JsonPropertyName("headers")] public List<Header> Headers { get; set; } = [];

    [JsonPropertyName("body")] public string Body { get; set; } = default!;

    [JsonPropertyName("bodyContentType")] public string BodyContentType { get; set; } = default!;

    [JsonPropertyName("inputs")] public List<InputBase> Inputs { get; set; } = [];

    [JsonPropertyName("actions")] public List<Action> Actions { get; set; } = [];

    [JsonPropertyName("addInId")] public string AddInId { get; set; } = default!;

    [JsonPropertyName("desktopCommandId")] public string DesktopCommandId { get; set; } = default!;

    [JsonPropertyName("initializationContext")] public object? InitializationContext { get; set; } 
}

================
File: Models/BuildingBlocks/Fact.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Fact
{
    [JsonPropertyName("name")] public string Name { get; set; } = default!;

    [JsonPropertyName("value")] public string Value { get; set; } = default!;
}

================
File: Models/BuildingBlocks/Header.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Header
{
    [JsonPropertyName("name")] public string Name { get; set; } = default!;

    [JsonPropertyName("value")] public string Value { get; set; } = default!;
}

================
File: Models/BuildingBlocks/Image.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Image
{
    [JsonPropertyName("image")] public string ImageUrl { get; set; } = default!;

    [JsonPropertyName("title")] public string Title { get; set; } = default!;
}

================
File: Models/BuildingBlocks/Section.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Section
{
    [JsonPropertyName("title")] public string Title { get; set; } = default!;

    [JsonPropertyName("startGroup")]
    public bool? StartGroup { get; set; } = default!;

    [JsonPropertyName("activityImage")]
    public string ActivityImage { get; set; } = default!;

    [JsonPropertyName("activityTitle")]
    public string ActivityTitle { get; set; } = default!;

    [JsonPropertyName("activitySubtitle")]
    public string ActivitySubtitle { get; set; } = default!;

    [JsonPropertyName("activityText")]
    public string ActivityText { get; set; } = default!;

    [JsonPropertyName("heroImage")]
    public Image? HeroImage { get; set; }

    [JsonPropertyName("text")]
    public string Text { get; set; } = default!;

    [JsonPropertyName("facts")] public List<Fact> Facts { get; set; } = [];

    [JsonPropertyName("images")] public List<Image> Images { get; set; } = [];

    [JsonPropertyName("potentialAction")] public List<Action> PotentialActions { get; set; } = [];
}

================
File: Models/BuildingBlocks/Target.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.BuildingBlocks;

public class Target
{
    [JsonPropertyName("os")] public string OperatingSystem { get; set; } = default!;

    [JsonPropertyName("uri")] public string Uri { get; set; } = default!;
}

================
File: Models/Inputs/Choice.cs
================
using System.Text.Json.Serialization;

namespace Hooki.MicrosoftTeams.Models.Inputs;

public class Choice
{
    [JsonPropertyName("display")] public string Display { get; set; } = default!;

    [JsonPropertyName("value")] public string Value { get; set; } = default!;
}

================
File: Models/Inputs/DateInput.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Inputs;

public class DateInput : InputBase
{
    public override InputType Type => InputType.DateInput;

    [JsonPropertyName("includeTime")] public bool? IncludeTime { get; set; }
}

================
File: Models/Inputs/InputBase.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Inputs;

public abstract class InputBase
{
    [JsonPropertyName("@type")] public abstract InputType Type { get; }

    [JsonPropertyName("id")] public string Id { get; set; } = default!;

    [JsonPropertyName("isRequired")] public bool? IsRequired { get; set; }

    [JsonPropertyName("title")] public string Title { get; set; } = default!;

    [JsonPropertyName("value")] public string Value { get; set; } = default!;
}

================
File: Models/Inputs/MultiChoiceInput.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Inputs;

public class MultiChoiceInput : InputBase
{
    public override InputType Type => InputType.MultiChoiceInput;

    [JsonPropertyName("choices")] public List<Choice> Choices { get; set; } = [];

    [JsonPropertyName("isMultiSelect")] public bool? IsMultiSelect { get; set; }

    [JsonPropertyName("style")] public string Style { get; set; } = default!;
}

================
File: Models/Inputs/TextInput.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Enums;

namespace Hooki.MicrosoftTeams.Models.Inputs;

public class TextInput : InputBase
{
    public override InputType Type => InputType.TextInput;

    [JsonPropertyName("isMultiline")]
    public bool? IsMultiline { get; set; }

    [JsonPropertyName("maxLength")]
    public int? MaxLength { get; set; }
}

================
File: Models/MessageCard.cs
================
using System.Text.Json.Serialization;
using Hooki.MicrosoftTeams.Models.Actions;
using Hooki.MicrosoftTeams.Models.BuildingBlocks;

namespace Hooki.MicrosoftTeams.Models;

/// <summary>
/// Refer to Microsoft Team's documentation for more details: https://learn.microsoft.com/en-us/outlook/actionable-messages/message-card-reference#design-guidelines
/// </summary>
public class MessageCard
{
    [JsonPropertyName("@type")]
    public string Type { get; set; } = "MessageCard";

    [JsonPropertyName("@context")]
    public string Context { get; set; } = "https://schema.org/extensions";

    [JsonPropertyName("correlationId")] public string CorrelationId { get; set; } = default!;

    [JsonPropertyName("expectedActors")]
    public List<string> ExpectedActors { get; set; } = default!;

    [JsonPropertyName("originator")]
    public string Originator { get; set; } = default!;

    [JsonPropertyName("summary")]
    public string Summary { get; set; } = default!;

    [JsonPropertyName("themeColor")]
    public string ThemeColor { get; set; } = default!;

    [JsonPropertyName("hideOriginalBody")]
    public bool? HideOriginalBody { get; set; }

    [JsonPropertyName("title")]
    public string Title { get; set; } = default!;

    [JsonPropertyName("text")]
    public string Text { get; set; } = default!;

    [JsonPropertyName("sections")]
    public List<Section> Sections { get; set; } = default!;

    [JsonPropertyName("potentialAction")] public List<ActionBase> PotentialActions { get; set; } = [];
}
