name: publish
on:
    push:
        branches: ["main"]
        tags: ["v*.*.*"] # Publish semver tags as releases.
    pull_request:
        branches: ["main"]        
    release:
        types:
        - published # Run the workflow when a new GitHub release is published

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true
    SOLUTION_DIR: src/Hooki

defaults:
    run:
        shell: pwsh

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_DIR }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_DIR }} --configuration Release --no-restore

    - name: Test
      run: dotnet test ${{ env.SOLUTION_DIR }} --no-restore

  pack-and-publish:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_DIR }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_DIR }} --configuration Release --no-restore

   ## - name: Set version from tag
   ##   run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Pack
      run: dotnet pack ${{ env.SOLUTION_DIR }} --configuration Release --no-build -p:PackageVersion=${{github.ref_name}} --output ./nupkgs

    - name: Publish to NuGet
      run: dotnet nuget push "./nupkgs/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload NuGet package as release asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./nupkgs/*.nupkg
        asset_name: ${{ github.event.repository.name }}.nupkg
        asset_content_type: application/zip